generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String                    @id @default(cuid())
  email                      String                    @unique
  password                   String
  firstName                  String?
  lastName                   String?
  role                       UserRole                  @default(BUYER)
  verified                   Boolean                   @default(false)
  avatar                     String?
  phone                      String?
  street                     String?
  city                       String?
  state                      String?
  zipCode                    String?
  country                    String?
  stripeCustomerId           String?                   @unique
  stripeAccountId            String?                   @unique
  createdAt                  DateTime                  @default(now())
  updatedAt                  DateTime                  @updatedAt
  emailVerificationToken     String?
  emailVerificationExpires   DateTime?
  passwordResetToken         String?
  passwordResetExpires       DateTime?
  companyName                String?
  isEnterprise               Boolean                   @default(false)
  locationCity               String?
  locationState              String?
  businessLicense            String?
  certifications             String[]
  specialties                String[]
  bids                       Bid[]
  conversationsAsParticipant ConversationParticipant[]
  enterpriseListings         EnterpriseListing[]       @relation("EnterpriseVendor")
  receivedMessages           Message[]                 @relation("ReceivedMessages")
  sentMessages               Message[]                 @relation("SentMessages")
  notifications              Notification[]
  ordersAsBuyer              Order[]                   @relation("BuyerOrders")
  ordersAsSeller             Order[]                   @relation("SellerOrders")
  payments                   Payment[]
  products                   Product[]
  quoteRequests              QuoteRequest[]            @relation("QuoteBuyer")
  quoteResponses             QuoteResponse[]           @relation("QuoteVendor")
  refreshTokens              RefreshToken[]
  reviews                    Review[]
  roiSimulations             ROISimulation[]           @relation("ROISimulations")
  vendorProjects             VendorProject[]           @relation("VendorProjects")
  wallet                     Wallet?

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Category {
  id                 String              @id @default(cuid())
  name               String              @unique
  description        String?
  parentId           String?
  imageUrl           String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  parent             Category?           @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children           Category[]          @relation("CategoryHierarchy")
  enterpriseListings EnterpriseListing[]
  products           Product[]

  @@map("categories")
}

model Product {
  id             String                 @id @default(cuid())
  title          String
  description    String
  price          Decimal                @db.Decimal(10, 2)
  imageUrls      String[]
  status         ProductStatus          @default(DRAFT)
  condition      ProductCondition
  categoryId     String
  ownerId        String
  isAuction      Boolean                @default(false)
  auctionEndDate DateTime?
  currentBid     Decimal?               @db.Decimal(10, 2)
  minimumBid     Decimal?               @db.Decimal(10, 2)
  buyNowPrice    Decimal?               @db.Decimal(10, 2)
  street         String?
  city           String?
  state          String?
  zipCode        String?
  country        String?
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  bids           Bid[]
  conversations  Conversation[]
  messages       Message[]
  orders         Order[]
  specifications ProductSpecification[]
  category       Category               @relation(fields: [categoryId], references: [id])
  owner          User                   @relation(fields: [ownerId], references: [id])
  reviews        Review[]

  @@map("products")
}

model ProductSpecification {
  id        String  @id @default(cuid())
  productId String
  name      String
  value     String
  unit      String?
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_specifications")
}

model Bid {
  id        String   @id @default(cuid())
  userId    String
  productId String
  amount    Decimal  @db.Decimal(10, 2)
  isWinning Boolean  @default(false)
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("bids")
}

model Order {
  id                    String       @id @default(cuid())
  buyerId               String
  sellerId              String
  productId             String
  status                OrderStatus  @default(PENDING)
  totalAmount           Decimal      @db.Decimal(10, 2)
  shippingStreet        String
  shippingCity          String
  shippingState         String
  shippingZipCode       String
  shippingCountry       String
  paymentType           PaymentType?
  paymentLast4          String?
  paymentExpiryMonth    Int?
  paymentExpiryYear     Int?
  paymentBrand          String?
  stripePaymentIntentId String?      @unique
  stripeFee             Decimal?     @db.Decimal(10, 2)
  platformFee           Decimal?     @db.Decimal(10, 2)
  sellerAmount          Decimal?     @db.Decimal(10, 2)
  trackingNumber        String?
  notes                 String?
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  buyer                 User         @relation("BuyerOrders", fields: [buyerId], references: [id])
  product               Product      @relation(fields: [productId], references: [id])
  seller                User         @relation("SellerOrders", fields: [sellerId], references: [id])
  payments              Payment[]
  reviews               Review[]

  @@map("orders")
}

model Message {
  id             String        @id @default(cuid())
  senderId       String
  receiverId     String
  content        String
  isRead         Boolean       @default(false)
  productId      String?
  sentAt         DateTime      @default(now())
  attachments    String?
  context        String?
  conversationId String?
  messageType    MessageType   @default(GENERAL)
  readAt         DateTime?
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  product        Product?      @relation(fields: [productId], references: [id])
  receiver       User          @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender         User          @relation("SentMessages", fields: [senderId], references: [id])

  @@map("messages")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      @db.SmallInt
  comment   String?
  productId String
  authorId  String
  orderId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  order     Order?   @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map("reviews")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  data      Json?
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Payment {
  id                    String        @id @default(cuid())
  userId                String
  orderId               String?
  stripePaymentIntentId String        @unique
  stripeChargeId        String?
  amount                Decimal       @db.Decimal(10, 2)
  currency              String        @default("usd")
  status                PaymentStatus
  description           String?
  metadata              Json?
  paymentMethodType     String?
  cardBrand             String?
  cardLast4             String?
  cardExpMonth          Int?
  cardExpYear           Int?
  stripeFee             Decimal?      @db.Decimal(10, 2)
  platformFee           Decimal?      @db.Decimal(10, 2)
  netAmount             Decimal?      @db.Decimal(10, 2)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  paidAt                DateTime?
  refundedAt            DateTime?
  order                 Order?        @relation(fields: [orderId], references: [id])
  user                  User          @relation(fields: [userId], references: [id])

  @@map("payments")
}

model Wallet {
  id            String              @id @default(cuid())
  userId        String              @unique
  balance       Decimal             @default(0.00) @db.Decimal(10, 2)
  lockedBalance Decimal             @default(0.00) @db.Decimal(10, 2)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  escrows       Escrow[]
  transactions  WalletTransaction[]
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wallets")
}

model WalletTransaction {
  id          String            @id @default(cuid())
  walletId    String
  type        TransactionType
  amount      Decimal           @db.Decimal(10, 2)
  status      TransactionStatus @default(PENDING)
  description String
  reference   String?
  metadata    Json?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  wallet      Wallet            @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@map("wallet_transactions")
}

model Escrow {
  id            String            @id @default(cuid())
  orderId       String            @unique
  buyerWalletId String
  sellerId      String
  amount        Decimal           @db.Decimal(10, 2)
  status        TransactionStatus @default(PENDING)
  reason        String?
  releasedAt    DateTime?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  buyerWallet   Wallet            @relation(fields: [buyerWalletId], references: [id])

  @@map("escrows")
}

model EnterpriseListing {
  id            String                  @id @default(cuid())
  name          String
  description   String
  categoryId    String
  vendorId      String
  specs         Json?
  location      String
  deliveryTime  String?
  basePrice     Decimal?                @db.Decimal(10, 2)
  priceUnit     String?
  status        EnterpriseListingStatus @default(DRAFT)
  quoteOnly     Boolean                 @default(true)
  imageUrls     String[]
  documentUrls  String[]
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  category      Category                @relation(fields: [categoryId], references: [id])
  vendor        User                    @relation("EnterpriseVendor", fields: [vendorId], references: [id])
  quoteRequests QuoteRequest[]

  @@map("enterprise_listings")
}

model QuoteRequest {
  id                String             @id @default(cuid())
  buyerCompanyId    String
  listingId         String?
  requestedQuantity Int
  projectSpecs      Json?
  deliveryDeadline  DateTime?
  notes             String?
  projectType       ProjectType?
  systemSizeKw      Decimal?           @db.Decimal(10, 2)
  location          String?
  mountingType      MountingType?
  budget            Decimal?           @db.Decimal(12, 2)
  status            QuoteRequestStatus @default(PENDING)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  expiresAt         DateTime?
  buyer             User               @relation("QuoteBuyer", fields: [buyerCompanyId], references: [id])
  listing           EnterpriseListing? @relation(fields: [listingId], references: [id])
  responses         QuoteResponse[]

  @@map("quote_requests")
}

model QuoteResponse {
  id                 String              @id @default(cuid())
  quoteRequestId     String
  vendorId           String
  proposedTotalPrice Decimal             @db.Decimal(12, 2)
  deliveryEstimate   String?
  validUntil         DateTime?
  message            String?
  pdfProposalUrl     String?
  lineItems          Json?
  paymentTerms       String?
  warrantyTerms      String?
  status             QuoteResponseStatus @default(PENDING)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  quoteRequest       QuoteRequest        @relation(fields: [quoteRequestId], references: [id])
  vendor             User                @relation("QuoteVendor", fields: [vendorId], references: [id])

  @@map("quote_responses")
}

model ROISimulation {
  id               String       @id @default(cuid())
  userId           String?
  projectType      ProjectType
  location         String
  systemSizeKw     Decimal      @db.Decimal(10, 2)
  panelWattage     Int?
  mountingType     MountingType
  targetBudget     Decimal?     @db.Decimal(12, 2)
  estimatedPanels  Int
  estimatedCost    Decimal      @db.Decimal(12, 2)
  roiYears         Decimal      @db.Decimal(5, 2)
  co2OffsetTons    Decimal      @db.Decimal(8, 2)
  installationTime String?
  freightCost      Decimal?     @db.Decimal(10, 2)
  energyProduction Decimal?     @db.Decimal(10, 2)
  createdAt        DateTime     @default(now())
  user             User?        @relation("ROISimulations", fields: [userId], references: [id])

  @@map("roi_simulations")
}

model VendorProject {
  id           String       @id @default(cuid())
  vendorId     String
  title        String
  description  String?
  status       String
  projectType  ProjectType?
  systemSizeKw Decimal?     @db.Decimal(10, 2)
  location     String?
  completedAt  DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  vendor       User         @relation("VendorProjects", fields: [vendorId], references: [id])

  @@map("vendor_projects")
}

model Conversation {
  id           String                    @id @default(cuid())
  type         ConversationType          @default(GENERAL)
  status       ConversationStatus        @default(ACTIVE)
  subject      String?
  productId    String?
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  context      String?
  participants ConversationParticipant[]
  product      Product?                  @relation(fields: [productId], references: [id])
  messages     Message[]

  @@map("conversations")
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  conversationId String
  userId         String
  joinedAt       DateTime     @default(now())
  lastReadAt     DateTime?
  role           String?
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@map("conversation_participants")
}

enum UserRole {
  BUYER
  VENDOR
  ADMIN
  MODERATOR
}

enum ProductStatus {
  DRAFT
  ACTIVE
  SOLD
  EXPIRED
  SUSPENDED
}

enum ProductCondition {
  NEW
  LIKE_NEW
  GOOD
  FAIR
  POOR
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentType {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  BANK_TRANSFER
  STRIPE
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELLED
  REFUNDED
}

enum NotificationType {
  BID_PLACED
  BID_OUTBID
  AUCTION_WON
  AUCTION_ENDED
  ORDER_CONFIRMED
  ORDER_SHIPPED
  ORDER_DELIVERED
  MESSAGE_RECEIVED
  REVIEW_RECEIVED
  PAYMENT_RECEIVED
  PAYMENT_FAILED
}

enum MessageType {
  GENERAL
  PRODUCT_INQUIRY
  QUOTE_DISCUSSION
  VENDOR_INQUIRY
  SUPPORT
}

enum ConversationType {
  GENERAL
  DIRECT_MESSAGE
  PRODUCT_INQUIRY
  VENDOR_INQUIRY
  QUOTE_DISCUSSION
  SUPPORT_TICKET
}

enum ConversationStatus {
  ACTIVE
  ARCHIVED
  CLOSED
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  PURCHASE
  REFUND
  AUCTION_HOLD
  AUCTION_RELEASE
  SELLER_PAYOUT
  PLATFORM_FEE
  ESCROW_HOLD
  ESCROW_RELEASE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum EnterpriseListingStatus {
  DRAFT
  ACTIVE
  SUSPENDED
  ARCHIVED
}

enum QuoteRequestStatus {
  PENDING
  RESPONDED
  ACCEPTED
  REJECTED
  EXPIRED
}

enum QuoteResponseStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum ProjectType {
  ROOFTOP
  GROUND
  UTILITY_SCALE
  COMMERCIAL
}

enum MountingType {
  FIXED
  ADJUSTABLE
  TRACKER
  GROUND_MOUNT
  ROOF_MOUNT
}
